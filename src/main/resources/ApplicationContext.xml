<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-4.0.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx.xsd">
	<!--      加载所有的service，指定所在的包 -->
	<context:component-scan base-package="com.yjl.service"/>
	<!-- 	加载数据库属性 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:jdbc.properties"/>
	</bean>
	<!-- 	配置连接池，用dbcp连接池 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${driver}"/>
		<property name="url" value="${url}"/>
		<property name="username" value="${username}"/>
		<property name="password" value="${password}"/>
		<!-- 连接池最大数量 -->
		<property name="maxActive" value="${maxActive}"/>
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="${maxIdle}"/>
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${minIdle}"/>
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${maxWait}"/>
	</bean>
	<!-- 	加载数据库会话工厂 -->
	<bean id="sqlSessionFactory" class="com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean">
		<!-- 	    指定数据源 -->
		<property name="dataSource" ref="dataSource"/>
		<!-- 	    <property name="configLocation" value="classpath:mybatis-config.xml"></property> -->
		<!-- 		指定mybatis mapper文件 -->
		<property name="mapperLocations" value="classpath:com/yjl/mapper/*.xml"/>
	</bean>
	<!-- 	配置自动扫描dao包 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.yjl.dao"/>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
	</bean>
	<!-- 	配置事物管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	<!-- 	配置shiro，用于登陆验证 -->
	<!-- 	注入自定义的realm -->
	<bean id="myRealm" class="com.yjl.Realm.myrealm"/>
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="myRealm" />
	</bean>
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- 	    安全管理者 -->
		<property name="securityManager" ref="securityManager" />
		<!-- 	    等行登陆的页面 -->
		<property name="loginUrl" value="/login.jsp"/>
		<!-- 	    过滤链 -->
		<property name="filterChainDefinitions">
			<value>
				<!-- 	            anon代表不拦截的地址,authc代表拦截的地址，logout代表退出的路径 -->
				/login=anon
				/user/*=anon
				/register=anon
				/static/**=anon
				/**=authc
				/user/logout=logout
			</value>
		</property>
	</bean>
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor">
	</bean>
	<bean class="org.apache.shiro.spring.LifecycleBeanPostProcessor" depends-on="lifecycleBeanPostProcessor"/>
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager"/>
	</bean>
	<!-- 	说明可以通过注解的方式配置事物 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
	<!-- 指定需要扫描的包（包括子包），使注解生效。dao包在mybatis-spring组件中已经扫描，这里不再需要扫描-->

</beans>
                         